%% INTRODUCTION
% TITLE: Map and sensor plotting script
% PROJECT: Optimal heterogeneous WSN placements
% DATE: 6 AUG 24
% AUTHORS: J. Mockler
% DESC: This script creates "exploit" placement figures for the associated
% sensor placement paper. 

close all; clear all

%% READ IN DATA AND PLOT MAP
% Import the map 
Map = readtable('GIS_terrain_resize.csv');
Map = table2array(Map);

% Plot the grid with pcolor and format
figure (1)
Map_plot = pcolor(Map);
Map_plot.FaceAlpha = 0.75;  
set(Map_plot, 'EdgeColor', 'none') % gets rid of checkerboard lines
set(gca, 'YDir','reverse') %flip y axis
hold on

% Create the colormap
% Row 1 == water, 2 == road, 3 == low veg, 4 == high veg, 5 == manmade
% Picked using the line below in the command window
% c = uisetcolor([1 1 0],'Select a color')
colorMap = [0,0.4471,0.7412; 
    0.5020    0.5020    0.5020; 
    0.8627    0.9608    0.7490;
    0.5725    0.7216    0.4745;
    0.8000,0.4000,0.4000];
colormap(colorMap)

% Paste in the imported targets
% CASE 1
% target_locs_list = [42 41; 44 44; 48 48; 41 43; 52 46];
% CASE 2
target_locs_list = [ 39 32; 55 40; 58 39; 64 33; 41 30 ];

% Paste in the sensors
% CASE 1
% placement_step_1 = [63.21988299009363 50.301701179412916; 41.62841105952802 55.718909428926395; 57.80425238524424 42.869635611693795; 46.9996883909076 58.33687905728023; 40.33305390438449 49.568180663516735; 49.5 39.89546817050247]; 
% init_sens = 4; % number of sensors in the explore placement

% CASE 2
placement_step_1 = [54.50633808 46.32458927; 40.44200985 39.33369424; 47.27705969 30.66311726; 56.79309556470051 30.492684042066756; 49.826931870141756 40.33081847279378 ];
init_sens = 3;

% Import sensor characteristics
% From excel sheet
% CASE 1
% sensor_type = ["radii" "radii" "radii" "bearing", "bearing", "radii"];
% CASE 2
sensor_type = ["radii" "bearing" "radii" "radii" "radii"];

% CASE 1
% First FIM data
% FIMs_raw = [0.61003803 0.17821498;
%  0.17821498 0.24788963; 0.72085197 0.09558614;
%  0.09558614 0.31688481;  0.88234066 -0.28422317;
%  -0.28422317  0.47382987; 0.61132504 0.21200627;
%  0.21200627 0.30452763;  0.70767689 -0.39610893;
%  -0.39610893  0.52952042];
% 
% % Second FIMs data
% FIMs_raw_2nd= [0.78726189 -0.1398979 ;
%  -0.1398979   0.86274417;  1.04058954 -0.59896446;
%  -0.59896446  0.83654964;  1.10707382 -0.35682752;
%  -0.35682752  0.7514476 ;  0.90827185 -0.19400205;
%  -0.19400205  0.78266731; 0.94611564 0.00370016;
%  0.00370016 0.74848826];

% CASE 2
% First FIM data
FIMs_raw = [0.65148612 0.09243682;
 0.09243682 0.85651035; 0.57042146 0.32217995;
 0.32217995 0.65382939; 0.34647743 0.24007387;
 0.24007387 0.75141411;  0.07111822 -0.0174888 ;
 -0.0174888   0.80716341; 0.68524236 0.1459975 ;
 0.1459975  0.86746539];

% Second FIMs data
FIMs_raw_2nd= [0.45106022 0.30141164;
 0.30141164 1.00947181; 0.89147907 0.02860814;
 0.02860814 1.21681248; 0.73242609 0.08692478;
 0.08692478 1.13279786;  0.19920428 -0.10779493;
 -0.10779493  1.1914801 ; 0.60371196 0.36929219;
 0.36929219 0.92978714];


% Parse out data - needs odd formatting appropriately save data
for i = 0:length(FIMs_raw(:,1))/2 - 1
    FIMs(1,:,i+1) = FIMs_raw(1+2*i,:);
    FIMs(2,:,i+1) = FIMs_raw(2+2*i,:);
end

% Parse out data - needs odd formatting appropriately save data
for i = 0:length(FIMs_raw(:,1))/2 - 1
    FIMs2(1,:,i+1) = FIMs_raw_2nd(1+2*i,:);
    FIMs2(2,:,i+1) = FIMs_raw_2nd(2+2*i,:);
end

%% PLOTTING
% Plot the first placement
for i = 1:length(placement_step_1(:,1))
    if i <= init_sens
        sens_mark = 'x';
    elseif i > init_sens
        sens_mark = 'diamond';
    end
    
    if strcmp(sensor_type(i),'radii')
        plot(placement_step_1(i, 1)+1, placement_step_1(i,2)+1, ...
            'marker', sens_mark, 'color', "#0072BD", 'MarkerSize', 9, "LineWidth", 1.5)

    elseif strcmp(sensor_type(i),'bearing')
        plot(placement_step_1(i, 1)+1, placement_step_1(i,2)+1, ...
            'marker', sens_mark, 'color', "#EDB120",'MarkerSize', 9, "LineWidth", 1.5)
    end
end

% Plot the discovered targets
for i = 1:length(target_locs_list(:,1))
    % offset plot by 0.5 to center it on the square!
    % Add one to compensate for python / matlab indexing diffs
    % Turn off legend entry
    if i == 1
    plot(target_locs_list(i, 1)+1.5, target_locs_list(i,2)+1.5, 'kp')
    else
    plot(target_locs_list(i, 1)+1.5, target_locs_list(i,2)+1.5, ...
        'kp','HandleVisibility','off')
    end
end

% Uncomment below for uncert ellipse plots

% Plot the uncertainty ellipses!

% Define some list of targets you want to plot for
target_plot_list = target_locs_list;

for i = 1:length(FIMs(1,1,:))
    % Check if target is in plot list
    target = target_locs_list(i,:);
    if ismember(target, target_plot_list, 'rows')
        % Plot the FIRST FIM
        FIM = FIMs(:,:,i);
        % compensate for indexing and formatting
        target(1) = target(1) + 1.5; target(2) = target(2) + 1.5;
        plot_vecs = plot_uncertainty_ellipse_vector(FIM, target);
        if i == 1
            plot(plot_vecs(1,:), plot_vecs(2, :), '--', 'color', [0.25 0.25 0.25])
        end
        plot(plot_vecs(1,:), plot_vecs(2, :), '--', 'color', [0.25 0.25 0.25], 'HandleVisibility','off')

        % Then the second FIM
        FIM2 = FIMs2(:,:,i);
        plot_vecs = plot_uncertainty_ellipse_vector(FIM2, target);
        if i == 1
            plot(plot_vecs(1,:), plot_vecs(2, :), '-k', 'LineWidth', 0.75)
        end
        plot(plot_vecs(1,:), plot_vecs(2, :), '-k', 'LineWidth', 0.75,'HandleVisibility','off')
    end
end

% % Make this match with the plot!
% CASE 1
% legend("", "Explore Dist.", "", "", "Explore AoA", "Exploit AoA", "Exploit Dist", ...
%    "Discovered Target", "Explore Uncertainty", "Exploit Uncertainty", ...
%    'Interpreter', 'latex')
% CASE 2
legend("", "Explore Dist.", "Explore AoA", "", "Exploit Dist", "", ...
    "Discovered Target", "Explore Uncertainty", "Exploit Uncertainty", ...
    'Interpreter', 'latex', 'location', 'southwest')

%% PLOT FORMATTING
xlabel('Longitude','Interpreter', 'latex') 
ylabel('Latitude','Interpreter', 'latex')
set(gca,'TickLabelInterpreter','latex')
% CASE 1
% title('Optimal Exploitation Placements - Case I','Interpreter', 'latex', 'Fontsize', 13)
% xlim([35, 70]); ylim([35, 65])
% CASE 2
title('Optimal Exploitation Placement - Case II','Interpreter', 'latex', 'Fontsize', 13)
xlim([30, 70]); ylim([25, 50])
